/*
** EPITECH PROJECT, 2021
** plazza [WSL: Ubuntu-20.04]
** File description:
** MessageQueue
*/

#ifndef INC_MESSAGEQUEUE_HPP_
#define INC_MESSAGEQUEUE_HPP_

#include <string>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>

#define MAX_MSG_LEN     1024

using qid_t = int;

class MessageQueue {
 public:
    /**
     * @brief Default constructor
     *
     * Sets the queue id to -1
     */
    MessageQueue(void) : _qid(-1) {}

    /**
     * @brief Construct a message queue with a generated id
     *
     * The id is generated by a call to ftok with pathname and proj_id as
     * arguments
     *
     * @param pathname Pathname to an existing, accessible file
     * @param proj_id Project id, must be non-zero
     */
    MessageQueue(const char *pathname, int proj_id);

    /**
     * @brief Destroy the Message Queue object
     */
    virtual ~MessageQueue(void);

    /**
     * @brief Sends a message to the queue.
     *
     * This function is a wrapper for the msgsnd syscall.
     *
     * @param type Message type, must be > 0
     * @param str Message text, length must be < 1024
     * @param flags Message flags, refer to the man of msgsnd
     */
    void send(long type, const std::string &str, int flags = IPC_NOWAIT);

    /**
     * @brief Receive a message from the queue.
     *
     * The behavior is FIFO, so you get the first message sent from the type.
     *
     * @param type The type of message to receive.
     * @param flags Message flags, refer to 'man 2 msgsnd'
     * @return std::string The received message
     */
    std::string recv(long type, int flags = MSG_NOERROR | IPC_NOWAIT);

    qid_t getId(void) const {
        return _qid;
    }
    void setId(qid_t qid);

 private:
    qid_t _qid;

    struct msgbuf {
        long mtype;
        char mtext[MAX_MSG_LEN + 1];
    };
};

#endif  // INC_MESSAGEQUEUE_HPP_
